generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid()) @map("id")
  password     String
  last_login   DateTime?
  is_superuser Boolean   @default(false)
  username     String    @unique(map: "sqlite_autoindex_username")
  first_name   String?
  last_name    String?
  is_staff     Boolean   @default(false)
  is_active    Boolean   @default(false)
  email        String    @unique(map: "sqlite_autoindex_user_email")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  refreshToken String?
  Roles        Roles[]
  referrals    Sponsor[] @relation("referrals")
  Sponsor      Sponsor?  @relation("user")
}

model Sponsor {
  userId    String @unique
  referraId String
  user      User?  @relation("user", fields: [userId], references: [id])
  referrals User?  @relation("referrals", fields: [referraId], references: [id])

  @@id([userId, referraId])
}

model Roles {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  content   String?
  published Boolean  @default(false)
  viewCount Int      @default(0)
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model Products {
  id          Int      @id @default(autoincrement())
  description String
  title       String
  images      Images[]

  inStock   Int
  price     Int
  sizes     SizeOnProduct[]
  slug      String          @unique
  type      String
  tags      TagsOnProduct[]
  gender    String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model Images {
  id          Int       @id @default(autoincrement())
  path        String    @unique
  description String?
  Products    Products? @relation(fields: [productsId], references: [id])
  productsId  Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model sizes {
  id        Int             @id @default(autoincrement())
  name      String          @unique
  product   SizeOnProduct[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model tags {
  id        Int             @id @default(autoincrement())
  name      String          @unique
  product   TagsOnProduct[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

// model UserSponsor {
//   id        Int  @id @default(autoincrement())
//   user      user @relation("user", fields: [userId], references: [id])
//   sponsor   user @relation("sponsor", fields: [sponsorId], references: [id])
//   userId    Int
//   sponsorId Int
// }

model SizeOnProduct {
  product    Products? @relation(fields: [productsId], references: [id])
  productsId Int
  sizes      sizes?    @relation(fields: [sizesId], references: [id])
  sizesId    Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@id([productsId, sizesId])
}

model TagsOnProduct {
  product    Products? @relation(fields: [productsId], references: [id])
  productsId Int
  tags       tags?     @relation(fields: [tagsId], references: [id])
  tagsId     Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([productsId, tagsId])
}
